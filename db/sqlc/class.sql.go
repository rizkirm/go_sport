// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: class.sql

package db

import (
	"context"
)

const createClass = `-- name: CreateClass :one
INSERT INTO sport.class (
  client_id,
  code,
  name,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, client_id, code, name, description, created_at, updated_at, deleted_at
`

type CreateClassParams struct {
	ClientID    int32  `json:"client_id"`
	Code        string `json:"code"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (SportClass, error) {
	row := q.db.QueryRowContext(ctx, createClass,
		arg.ClientID,
		arg.Code,
		arg.Name,
		arg.Description,
	)
	var i SportClass
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getClass = `-- name: GetClass :one
SELECT id, client_id, code, name, description, created_at, updated_at, deleted_at FROM sport.class
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClass(ctx context.Context, id int32) (SportClass, error) {
	row := q.db.QueryRowContext(ctx, getClass, id)
	var i SportClass
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listClass = `-- name: ListClass :many
SELECT id, client_id, code, name, description, created_at, updated_at, deleted_at FROM sport.class
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListClassParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClass(ctx context.Context, arg ListClassParams) ([]SportClass, error) {
	rows, err := q.db.QueryContext(ctx, listClass, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SportClass{}
	for rows.Next() {
		var i SportClass
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Code,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
