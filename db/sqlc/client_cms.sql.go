// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: client_cms.sql

package db

import (
	"context"
)

const createClientCMS = `-- name: CreateClientCMS :one
INSERT INTO sport.client_cms (
  hero_section,
  about_section
) VALUES (
  $1, $2
) RETURNING id, client_id, hero_section, about_section, created_at, updated_at, deleted_at
`

type CreateClientCMSParams struct {
	HeroSection  string `json:"hero_section"`
	AboutSection string `json:"about_section"`
}

func (q *Queries) CreateClientCMS(ctx context.Context, arg CreateClientCMSParams) (SportClientCm, error) {
	row := q.db.QueryRowContext(ctx, createClientCMS, arg.HeroSection, arg.AboutSection)
	var i SportClientCm
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.HeroSection,
		&i.AboutSection,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getClientCMS = `-- name: GetClientCMS :one
SELECT id, client_id, hero_section, about_section, created_at, updated_at, deleted_at FROM sport.client_cms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClientCMS(ctx context.Context, id int32) (SportClientCm, error) {
	row := q.db.QueryRowContext(ctx, getClientCMS, id)
	var i SportClientCm
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.HeroSection,
		&i.AboutSection,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listClientCMS = `-- name: ListClientCMS :many
SELECT id, client_id, hero_section, about_section, created_at, updated_at, deleted_at FROM sport.client_cms
WHERE client_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListClientCMSParams struct {
	ClientID int32 `json:"client_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListClientCMS(ctx context.Context, arg ListClientCMSParams) ([]SportClientCm, error) {
	rows, err := q.db.QueryContext(ctx, listClientCMS, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SportClientCm{}
	for rows.Next() {
		var i SportClientCm
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.HeroSection,
			&i.AboutSection,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
