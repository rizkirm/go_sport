// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: news.sql

package db

import (
	"context"
)

const createNews = `-- name: CreateNews :one
INSERT INTO sport.news (
  code,
  title,
  description,
  path_photo
) VALUES (
  $1, $2, $3, $4
) RETURNING id, client_id, code, title, description, path_photo, created_at, updated_at, deleted_at
`

type CreateNewsParams struct {
	Code        string `json:"code"`
	Title       string `json:"title"`
	Description string `json:"description"`
	PathPhoto   string `json:"path_photo"`
}

func (q *Queries) CreateNews(ctx context.Context, arg CreateNewsParams) (SportNews, error) {
	row := q.db.QueryRowContext(ctx, createNews,
		arg.Code,
		arg.Title,
		arg.Description,
		arg.PathPhoto,
	)
	var i SportNews
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Code,
		&i.Title,
		&i.Description,
		&i.PathPhoto,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getNews = `-- name: GetNews :one
SELECT id, client_id, code, title, description, path_photo, created_at, updated_at, deleted_at FROM sport.news
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNews(ctx context.Context, id int32) (SportNews, error) {
	row := q.db.QueryRowContext(ctx, getNews, id)
	var i SportNews
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Code,
		&i.Title,
		&i.Description,
		&i.PathPhoto,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listNews = `-- name: ListNews :many
SELECT id, client_id, code, title, description, path_photo, created_at, updated_at, deleted_at FROM sport.news
WHERE client_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListNewsParams struct {
	ClientID int32 `json:"client_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListNews(ctx context.Context, arg ListNewsParams) ([]SportNews, error) {
	rows, err := q.db.QueryContext(ctx, listNews, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SportNews{}
	for rows.Next() {
		var i SportNews
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Code,
			&i.Title,
			&i.Description,
			&i.PathPhoto,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
