// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: client.sql

package db

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO sport.client (
    code, name, domain_local, domain_production, whatsapp_number, whatsapp_message, whatsapp_link,
    fb_link, ig_link, path_logo
) VALUES (
    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10
) RETURNING id, code, name, domain_local, domain_production, whatsapp_number, whatsapp_message, whatsapp_link, fb_link, ig_link, path_logo, created_at, updated_at, deleted_at
`

type CreateClientParams struct {
	Code             string `json:"code"`
	Name             string `json:"name"`
	DomainLocal      string `json:"domain_local"`
	DomainProduction string `json:"domain_production"`
	WhatsappNumber   string `json:"whatsapp_number"`
	WhatsappMessage  string `json:"whatsapp_message"`
	WhatsappLink     string `json:"whatsapp_link"`
	FbLink           string `json:"fb_link"`
	IgLink           string `json:"ig_link"`
	PathLogo         string `json:"path_logo"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (SportClient, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.Code,
		arg.Name,
		arg.DomainLocal,
		arg.DomainProduction,
		arg.WhatsappNumber,
		arg.WhatsappMessage,
		arg.WhatsappLink,
		arg.FbLink,
		arg.IgLink,
		arg.PathLogo,
	)
	var i SportClient
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.DomainLocal,
		&i.DomainProduction,
		&i.WhatsappNumber,
		&i.WhatsappMessage,
		&i.WhatsappLink,
		&i.FbLink,
		&i.IgLink,
		&i.PathLogo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM sport.client 
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id, code, name, domain_local, domain_production, whatsapp_number, whatsapp_message, whatsapp_link, fb_link, ig_link, path_logo, created_at, updated_at, deleted_at FROM sport.client
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, id int32) (SportClient, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i SportClient
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.DomainLocal,
		&i.DomainProduction,
		&i.WhatsappNumber,
		&i.WhatsappMessage,
		&i.WhatsappLink,
		&i.FbLink,
		&i.IgLink,
		&i.PathLogo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, code, name, domain_local, domain_production, whatsapp_number, whatsapp_message, whatsapp_link, fb_link, ig_link, path_logo, created_at, updated_at, deleted_at FROM sport.client
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClients(ctx context.Context, arg ListClientsParams) ([]SportClient, error) {
	rows, err := q.db.QueryContext(ctx, listClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SportClient{}
	for rows.Next() {
		var i SportClient
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.DomainLocal,
			&i.DomainProduction,
			&i.WhatsappNumber,
			&i.WhatsappMessage,
			&i.WhatsappLink,
			&i.FbLink,
			&i.IgLink,
			&i.PathLogo,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE sport.client
SET 
name = $2,
domain_local = $3, 
domain_production = $4, 
whatsapp_number = $5,
whatsapp_message = $6,
whatsapp_link = $7,
fb_link = $8,
ig_link = $9,
path_logo = $10
WHERE id = $1
RETURNING id, code, name, domain_local, domain_production, whatsapp_number, whatsapp_message, whatsapp_link, fb_link, ig_link, path_logo, created_at, updated_at, deleted_at
`

type UpdateClientParams struct {
	ID               int32  `json:"id"`
	Name             string `json:"name"`
	DomainLocal      string `json:"domain_local"`
	DomainProduction string `json:"domain_production"`
	WhatsappNumber   string `json:"whatsapp_number"`
	WhatsappMessage  string `json:"whatsapp_message"`
	WhatsappLink     string `json:"whatsapp_link"`
	FbLink           string `json:"fb_link"`
	IgLink           string `json:"ig_link"`
	PathLogo         string `json:"path_logo"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (SportClient, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ID,
		arg.Name,
		arg.DomainLocal,
		arg.DomainProduction,
		arg.WhatsappNumber,
		arg.WhatsappMessage,
		arg.WhatsappLink,
		arg.FbLink,
		arg.IgLink,
		arg.PathLogo,
	)
	var i SportClient
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.DomainLocal,
		&i.DomainProduction,
		&i.WhatsappNumber,
		&i.WhatsappMessage,
		&i.WhatsappLink,
		&i.FbLink,
		&i.IgLink,
		&i.PathLogo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
